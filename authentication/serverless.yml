# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!

service: serverless-authentication # NOTE: update this with your service name

provider:
  name: aws
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Scan
      - dynamodb:Query
      - dynamodb:PutItem
      - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:*
    - Effect: Allow
      Action:
      - cognito-sync:*
      - cognito-identity:*
      Resource: arn:aws:cognito-identity:*:*:*
  runtime: nodejs4.3

# you can overwrite defaults here
#defaults:
#  stage: dev
#  region: eu-west-1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  signin:
    handler: handler.signin
    events:
      - http:
          path: authentication/signin/{provider}
          method: get
          request:
            template:
              application/json: "{\"provider\":\"$input.params('provider')\",\"host\":\"$input.params().header.get('host')\",\"stage\":\"$context.stage\"}"
  callback:
    handler: handler.callback
    events:
      - http:
          path: authentication/callback/{provider}
          method: get
          request:
            template:
              application/json: "{\"provider\":\"$input.params('provider')\",\"code\":\"$input.params('code')\",\"state\":\"$input.params('state')\",\"host\":\"$input.params().header.get('host')\",\"stage\":\"$context.stage\"}"
  refresh:
    handler: handler.refresh
    events:
      - http:
          path: authentication/refresh/{refresh_token}
          method: get
          cors: true
  authorize:
    handler: handler.authorize

resources:
  Resources:
    Dynamo:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: Token
          AttributeType: S
        - AttributeName: Type
          AttributeType: S
        KeySchema:
        - AttributeName: Token
          KeyType: HASH
        - AttributeName: Type
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.stage}-${self:service}-cache
    ApiGatewayMethodAuthenticationSigninProviderGet:
      Properties:
        Integration:
          IntegrationResponses:
            - StatusCode: 302
              ResponseParameters:
                method.response.header.Location: integration.response.body.url
        MethodResponses:
          - StatusCode: 302
            ResponseParameters:
              method.response.header.Location: true
    ApiGatewayMethodAuthenticationCallbackProviderGet:
      Properties:
        Integration:
          IntegrationResponses:
            - StatusCode: 302
              ResponseParameters:
                method.response.header.Location: integration.response.body.url
        MethodResponses:
          - StatusCode: 302
            ResponseParameters:
              method.response.header.Location: true
